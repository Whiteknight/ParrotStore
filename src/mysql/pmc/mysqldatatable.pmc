#include "ps_mysql.h"
#define GET_RESULT(s) ((MYSQL_RES*)PARROT_MYSQLDATATABLE(s)->result)

INTVAL MySqlDataTable_type;

pmclass MySqlDataTable dynpmc auto_attrs provides iterator {
    ATTR Hash *colnames;
    ATTR PMC *rows;

    void class_init() {
        MySqlDataTable_type = entry;
    }

    VTABLE void init()
    {
        PObj_custom_mark_SET(SELF);
    }

    VTABLE void set_pointer(void *rawptr)
    {
        Parrot_MySqlDataTable_attributes * const attrs = PARROT_MYSQLDATATABLE(SELF);
        MYSQL_RES * const result = (MYSQL_RES*)rawptr;
        INTVAL num_fields = mysql_num_fields(result);
        Hash * const colnames = Parrot_hash_create_sized(INTERP, enum_hash_int, Hash_key_type_STRING, num_fields);
        PMC * const rows = Parrot_pmc_new(INTERP, enum_class_ResizablePMCArray);

        {
            MYSQL_FIELD *field;
            INTVAL idx = 0;
            while(field = mysql_fetch_field(result)) {
                STRING * const colnamestr = Parrot_str_new(INTERP, field->name, 0);
                Parrot_hash_put(INTERP, colnames, (void*)colnamestr, (void*)idx);
                idx++;
            }
            attrs->colnames = colnames;
        }

        {
            MYSQL_ROW row;
            INTVAL row_idx = 0;
            while (row = mysql_fetch_row(result)) {
                unsigned long * field_lengths = mysql_fetch_lengths(result);
                PMC * const rowpmc = Parrot_pmc_new_init(INTERP, MySqlDataRow_type, SELF);
                PMC * const data = Parrot_pmc_new_init_int(INTERP, enum_class_FixedStringArray, num_fields);
                INTVAL i = 0;
                for (; i < num_fields; i++) {
                    STRING * const field_val = Parrot_str_new_init(INTERP, row[i], (INTVAL)field_lengths[i], Parrot_binary_encoding_ptr, 0);
                    VTABLE_set_string_keyed_int(INTERP, data, i, field_val);
                }
                VTABLE_set_pmc(INTERP, rowpmc, data);
                VTABLE_set_integer_native(INTERP, rowpmc, row_idx);
                row_idx++;
                VTABLE_push_pmc(INTERP, rows, rowpmc);
            }
        }

        attrs->rows = rows;
    }

    VTABLE void mark()
    {
        Parrot_MySqlDataTable_attributes * const attrs = PARROT_MYSQLDATATABLE(SELF);
        if (!PMC_IS_NULL(attrs->colnames))
            Parrot_hash_mark(INTERP, attrs->colnames);
        if (!PMC_IS_NULL(attrs->rows))
            Parrot_gc_mark_PMC_alive(INTERP, attrs->rows);
    }

    VTABLE INTVAL get_integer_keyed_str(STRING *colname)
    {
        return (INTVAL)Parrot_hash_get(INTERP, PARROT_MYSQLDATATABLE(SELF)->colnames, (void*)colname);
    }

    VTABLE PMC *get_iter()
    {
        return Parrot_pmc_new_init(INTERP, enum_class_ArrayIterator, PARROT_MYSQLDATATABLE(SELF)->rows);
    }

    VTABLE void *get_pointer_keyed(PMC *row)
    {
        // For iterating rows, we need an easy way to get a pointer to the colnames
        // hash. In the future we should find a better way to do it.
        return PARROT_MYSQLDATATABLE(SELF)->colnames;
    }
}

class ParrotStore.Memcached
{
    var serverlist;
    var socketfactory;

    function Memcached(var servers)
    {
        self.serverlist = new ParrotStore.Memcached.ServerList(servers);
        self.socketfactory = Rosella.Net.tcp_socket_factory();
    }

    function get(string name)
    {
        var socket = self.__get_socket(name);
        socket.puts("get " + name + "\r\n");
        string status_line = socket.readline();
        var parts = split(" ", status_line);
        if (elements(parts) == 0) {
            self.__cleanup_socket(socket);
            return false, "";
        }
        string status = parts[0];
        if (length(status) >= 3 && substr(status, 0, 3) == "END") {
            self.__cleanup_socket(socket);
            return false, "";
        }
        if (status == "VALUE")
        string rename = parts[1];
        int flags = int(parts[2]);
        int bytes = int(parts[3]);
        string content = socket.read(bytes);
        self.__cleanup_socket(socket);
        return true, content;
    }

    function autoget(string name, var f, int exptime = 0)
    {
        :(int have, string value) = self.get(name);
        if (have)
            return value;
        value = f();
        self.set(name, value, 0);
        return value;
    }

    function set(string name, string value, int exptime = 0)
    {
        return self.__store("set", name, value, exptime);
    }

    function add(string name, string value, int exptime = 0)
    {
        return self.__store("add", name, value, exptime);
    }

    function replace(string name, string value, int exptime = 0)
    {
        return self.__store("replace", name, value, exptime);
    }

    function append(string name, string value, int exptime = 0)
    {
        return self.__store("append", name, value, exptime);
    }

    function prepend(string name, string value, int exptime = 0)
    {
        return self.__store("prepend", name, value, exptime);
    }

    function __store(string cmd, string name, value, int exptime)
    {
        var socket = self.__get_socket(name);
        string header_msg = sprintf("%s %s %d %d %d\r\n", [cmd, name, 0, exptime, bytelength(value)]);
        socket.puts(header_msg);
        socket.puts(value);
        socket.puts("\r\n");
        string status_line = socket.readline();
        self.__cleanup_socket(socket);
        if (status_line == "STORED")
            return true;
        return false;
    }

    function delete(string name)
    {
        var socket = self.__get_socket(name);
        socket.puts("delete " + name + "\r\n");
        string status_line = socket.readline();
        self.__cleanup_socket(socket);
        if (status_line == "DELETED")
            return true;
        return false;
    }

    function __get_socket(string name)
    {
        string server = self.serverlist.select_server(name);
        // TODO: Get the port number for the server url
        return self.socketfactory.create(server, 11211);
    }

    function __cleanup_socket(var socket)
    {
        socket.close();
    }
}
